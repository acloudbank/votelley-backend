/**
 *
 *  Poll.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Poll.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::votingregister;

const std::string Poll::Cols::_id = "id";
const std::string Poll::Cols::_title = "title";
const std::string Poll::Cols::_secretkey = "secretkey";
const std::string Poll::Cols::_vote = "vote";
const std::string Poll::Cols::_votes = "votes";
const std::string Poll::Cols::_lasts_until = "lasts_until";
const std::string Poll::Cols::_lasts_from = "lasts_from";
const std::string Poll::primaryKeyName = "id";
const bool Poll::hasPrimaryKey = true;
const std::string Poll::tableName = "poll";

const std::vector<typename Poll::MetaData> Poll::metaData_={
{"id","int32_t","integer",4,0,1,1},
{"title","std::string","character varying",70,0,0,0},
{"secretkey","std::string","character varying",150,0,0,0},
{"vote","std::string","character varying",100,0,0,0},
{"votes","std::string","character varying",100,0,0,0},
{"lasts_until","::trantor::Date","date",0,0,0,0},
{"lasts_from","::trantor::Date","date",0,0,0,0}
};
const std::string &Poll::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Poll::Poll(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["title"].isNull())
        {
            title_=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["secretkey"].isNull())
        {
            secretkey_=std::make_shared<std::string>(r["secretkey"].as<std::string>());
        }
        if(!r["vote"].isNull())
        {
            vote_=std::make_shared<std::string>(r["vote"].as<std::string>());
        }
        if(!r["votes"].isNull())
        {
            votes_=std::make_shared<std::string>(r["votes"].as<std::string>());
        }
        if(!r["lasts_until"].isNull())
        {
            auto daysStr = r["lasts_until"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastsUntil_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["lasts_from"].isNull())
        {
            auto daysStr = r["lasts_from"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastsFrom_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            secretkey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            vote_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            votes_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastsUntil_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastsFrom_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }

}

Poll::Poll(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            secretkey_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            vote_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            votes_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastsUntil_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastsFrom_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

Poll::Poll(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("secretkey"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["secretkey"].isNull())
        {
            secretkey_=std::make_shared<std::string>(pJson["secretkey"].asString());
        }
    }
    if(pJson.isMember("vote"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["vote"].isNull())
        {
            vote_=std::make_shared<std::string>(pJson["vote"].asString());
        }
    }
    if(pJson.isMember("votes"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["votes"].isNull())
        {
            votes_=std::make_shared<std::string>(pJson["votes"].asString());
        }
    }
    if(pJson.isMember("lasts_until"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["lasts_until"].isNull())
        {
            auto daysStr = pJson["lasts_until"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastsUntil_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("lasts_from"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["lasts_from"].isNull())
        {
            auto daysStr = pJson["lasts_from"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastsFrom_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void Poll::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            secretkey_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            vote_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            votes_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastsUntil_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastsFrom_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void Poll::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("secretkey"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["secretkey"].isNull())
        {
            secretkey_=std::make_shared<std::string>(pJson["secretkey"].asString());
        }
    }
    if(pJson.isMember("vote"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["vote"].isNull())
        {
            vote_=std::make_shared<std::string>(pJson["vote"].asString());
        }
    }
    if(pJson.isMember("votes"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["votes"].isNull())
        {
            votes_=std::make_shared<std::string>(pJson["votes"].asString());
        }
    }
    if(pJson.isMember("lasts_until"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["lasts_until"].isNull())
        {
            auto daysStr = pJson["lasts_until"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastsUntil_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("lasts_from"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["lasts_from"].isNull())
        {
            auto daysStr = pJson["lasts_from"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            lastsFrom_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

const int32_t &Poll::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Poll::getId() const noexcept
{
    return id_;
}
void Poll::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Poll::PrimaryKeyType & Poll::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Poll::getValueOfTitle() const noexcept
{
    static const std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Poll::getTitle() const noexcept
{
    return title_;
}
void Poll::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[1] = true;
}
void Poll::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[1] = true;
}
void Poll::setTitleToNull() noexcept
{
    title_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Poll::getValueOfSecretkey() const noexcept
{
    static const std::string defaultValue = std::string();
    if(secretkey_)
        return *secretkey_;
    return defaultValue;
}
std::string Poll::getValueOfSecretkeyAsString() const noexcept
{
    const static std::string defaultValue = std::string();
    if(secretkey_)
        return std::string(secretkey_->data(),secretkey_->size());
    return defaultValue;
}
const std::shared_ptr<std::string> &Poll::getSecretkey() const noexcept
{
    return secretkey_;
}
void Poll::setSecretkey(const std::string &pSecretkey) noexcept
{
    secretkey_ = std::make_shared<std::string>(pSecretkey);
    dirtyFlag_[2] = true;
}
void Poll::setSecretkey(std::string &&pSecretkey) noexcept
{
    secretkey_ = std::make_shared<std::string>(std::move(pSecretkey));
    dirtyFlag_[2] = true;
}
void Poll::setSecretkeyToNull() noexcept
{
    secretkey_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Poll::getValueOfVote() const noexcept
{
    static const std::string defaultValue = std::string();
    if(vote_)
        return *vote_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Poll::getVote() const noexcept
{
    return vote_;
}
void Poll::setVote(const std::string &pVote) noexcept
{
    vote_ = std::make_shared<std::string>(pVote);
    dirtyFlag_[3] = true;
}
void Poll::setVote(std::string &&pVote) noexcept
{
    vote_ = std::make_shared<std::string>(std::move(pVote));
    dirtyFlag_[3] = true;
}
void Poll::setVoteToNull() noexcept
{
    vote_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Poll::getValueOfVotes() const noexcept
{
    static const std::string defaultValue = std::string();
    if(votes_)
        return *votes_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Poll::getVotes() const noexcept
{
    return votes_;
}
void Poll::setVotes(const std::string &pVotes) noexcept
{
    votes_ = std::make_shared<std::string>(pVotes);
    dirtyFlag_[4] = true;
}
void Poll::setVotes(std::string &&pVotes) noexcept
{
    votes_ = std::make_shared<std::string>(std::move(pVotes));
    dirtyFlag_[4] = true;
}
void Poll::setVotesToNull() noexcept
{
    votes_.reset();
    dirtyFlag_[4] = true;
}

const ::trantor::Date &Poll::getValueOfLastsUntil() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(lastsUntil_)
        return *lastsUntil_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Poll::getLastsUntil() const noexcept
{
    return lastsUntil_;
}
void Poll::setLastsUntil(const ::trantor::Date &pLastsUntil) noexcept
{
    lastsUntil_ = std::make_shared<::trantor::Date>(pLastsUntil.roundDay());
    dirtyFlag_[5] = true;
}
void Poll::setLastsUntilToNull() noexcept
{
    lastsUntil_.reset();
    dirtyFlag_[5] = true;
}

const ::trantor::Date &Poll::getValueOfLastsFrom() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(lastsFrom_)
        return *lastsFrom_;
    return defaultValue;
}
std::string Poll::getValueOfVotesAsString() const noexcept
{
    const static std::string defaultValue = std::string();
    if(votes_)
        return std::string(votes_->data(),votes_->size());
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Poll::getLastsFrom() const noexcept
{
    return lastsFrom_;
}
void Poll::setLastsFrom(const ::trantor::Date &pLastsFrom) noexcept
{
    lastsFrom_ = std::make_shared<::trantor::Date>(pLastsFrom.roundDay());
    dirtyFlag_[6] = true;
}
void Poll::setLastsFromToNull() noexcept
{
    lastsFrom_.reset();
    dirtyFlag_[6] = true;
}

void Poll::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Poll::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "title",
        "secretkey",
        "vote",
        "votes",
        "lasts_until",
        "lasts_from"
    };
    return inCols;
}

void Poll::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSecretkey())
        {
            binder << getValueOfSecretkey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getVote())
        {
            binder << getValueOfVote();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getVotes())
        {
            binder << getValueOfVotes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLastsUntil())
        {
            binder << getValueOfLastsUntil();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getLastsFrom())
        {
            binder << getValueOfLastsFrom();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Poll::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void Poll::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSecretkey())
        {
            binder << getValueOfSecretkey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getVote())
        {
            binder << getValueOfVote();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getVotes())
        {
            binder << getValueOfVotes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLastsUntil())
        {
            binder << getValueOfLastsUntil();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getLastsFrom())
        {
            binder << getValueOfLastsFrom();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Poll::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getSecretkey())
    {
        ret["secretkey"]=getValueOfSecretkey();
    }
    else
    {
        ret["secretkey"]=Json::Value();
    }
    if(getVote())
    {
        ret["vote"]=getValueOfVote();
    }
    else
    {
        ret["vote"]=Json::Value();
    }
    if(getVotes())
    {
        ret["votes"]=getValueOfVotes();
    }
    else
    {
        ret["votes"]=Json::Value();
    }
    if(getLastsUntil())
    {
        ret["lasts_until"]=getLastsUntil()->toDbStringLocal();
    }
    else
    {
        ret["lasts_until"]=Json::Value();
    }
    if(getLastsFrom())
    {
        ret["lasts_from"]=getLastsFrom()->toDbStringLocal();
    }
    else
    {
        ret["lasts_from"]=Json::Value();
    }
    return ret;
}

Json::Value Poll::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[1]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getSecretkey())
            {
                ret[pMasqueradingVector[2]]=getValueOfSecretkey();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getVote())
            {
                ret[pMasqueradingVector[3]]=getValueOfVote();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getVotes())
            {
                ret[pMasqueradingVector[4]]=getValueOfVotes();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getLastsUntil())
            {
                ret[pMasqueradingVector[5]]=getLastsUntil()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getLastsFrom())
            {
                ret[pMasqueradingVector[6]]=getLastsFrom()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getSecretkey())
    {
        ret["secretkey"]=getValueOfSecretkey();
    }
    else
    {
        ret["secretkey"]=Json::Value();
    }
    if(getVote())
    {
        ret["vote"]=getValueOfVote();
    }
    else
    {
        ret["vote"]=Json::Value();
    }
    if(getVotes())
    {
        ret["votes"]=getValueOfVotes();
    }
    else
    {
        ret["votes"]=Json::Value();
    }
    if(getLastsUntil())
    {
        ret["lasts_until"]=getLastsUntil()->toDbStringLocal();
    }
    else
    {
        ret["lasts_until"]=Json::Value();
    }
    if(getLastsFrom())
    {
        ret["lasts_from"]=getLastsFrom()->toDbStringLocal();
    }
    else
    {
        ret["lasts_from"]=Json::Value();
    }
    return ret;
}

bool Poll::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    else
    {
        err="The id column cannot be null";
        return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(1, "title", pJson["title"], err, true))
            return false;
    }
    if(pJson.isMember("secretkey"))
    {
        if(!validJsonOfField(2, "secretkey", pJson["secretkey"], err, true))
            return false;
    }
    if(pJson.isMember("vote"))
    {
        if(!validJsonOfField(3, "vote", pJson["vote"], err, true))
            return false;
    }
    if(pJson.isMember("votes"))
    {
        if(!validJsonOfField(4, "votes", pJson["votes"], err, true))
            return false;
    }
    if(pJson.isMember("lasts_until"))
    {
        if(!validJsonOfField(5, "lasts_until", pJson["lasts_until"], err, true))
            return false;
    }
    if(pJson.isMember("lasts_from"))
    {
        if(!validJsonOfField(6, "lasts_from", pJson["lasts_from"], err, true))
            return false;
    }
    return true;
}
bool Poll::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Poll::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(1, "title", pJson["title"], err, false))
            return false;
    }
    if(pJson.isMember("secretkey"))
    {
        if(!validJsonOfField(2, "secretkey", pJson["secretkey"], err, false))
            return false;
    }
    if(pJson.isMember("vote"))
    {
        if(!validJsonOfField(3, "vote", pJson["vote"], err, false))
            return false;
    }
    if(pJson.isMember("votes"))
    {
        if(!validJsonOfField(4, "votes", pJson["votes"], err, false))
            return false;
    }
    if(pJson.isMember("lasts_until"))
    {
        if(!validJsonOfField(5, "lasts_until", pJson["lasts_until"], err, false))
            return false;
    }
    if(pJson.isMember("lasts_from"))
    {
        if(!validJsonOfField(6, "lasts_from", pJson["lasts_from"], err, false))
            return false;
    }
    return true;
}
bool Poll::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Poll::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 70)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 70)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 150)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 150)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
